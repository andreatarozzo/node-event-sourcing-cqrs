import { Model } from "mongoose";
import { TransactionEventModel } from "../database/models/transaction_event_db_model";
import { transactionBalanceReducer } from "../domain/reducers/transaction_reducer";
import {
  ITransactionRepository,
  TransactionEvent,
  BalanceReducerFunction,
} from "../types";

export class TransactionRepo implements ITransactionRepository {
  transactionEventModel: Model<TransactionEvent, {}, {}, {}>;
  balanceReducer: BalanceReducerFunction;

  constructor(
    transaction_event_model: Model<TransactionEvent, {}, {}, {}>,
    transactionBalanceReducer: BalanceReducerFunction
  ) {
    this.transactionEventModel = transaction_event_model;
    this.balanceReducer = transactionBalanceReducer;
  }

  /**
   * Get all Transactions generated which have a sender id matching with the one provided.
   * @param sender_id
   * @returns
   */
  public async getEventsBySenderId(
    sender_id: string
  ): Promise<TransactionEvent[] | void> {
    return await this.transactionEventModel
      .find({ sender_id })
      .sort({ timestamp: 1 });
  }

  /**
   * Get all Transactions generated which have a receiver id matching with the one provided.
   * @param receiver_id
   * @returns
   */
  public async getEventsByReceiverId(
    receiver_id: string
  ): Promise<TransactionEvent[] | void> {
    return await this.transactionEventModel
      .find({ receiver_id })
      .sort({ timestamp: 1 });
  }

  /**
   * Get all Transactions generated for the account id provided.
   * @param account_id
   * @returns
   */
  public async getEventsByAccountId(
    account_id: string
  ): Promise<TransactionEvent[]> {
    return await this.transactionEventModel
      .find({
        $or: [
          { sender_account_id: account_id },
          { receiver_account_id: account_id },
        ],
      })
      .sort({ timestamp: 1 });
  }

  /**
   * Get all Transactions generated which have a sender account id matching with the one provided.
   * @param sender_account_id
   * @returns
   */
  public async getEventsBySenderAccountId(
    sender_account_id: string
  ): Promise<TransactionEvent[] | void> {
    return await this.transactionEventModel
      .find({ sender_account_id })
      .sort({ timestamp: 1 });
  }

  /**
   * Get all Transactions generated which have a receiver account id matching with the one provided.
   * @param receiver_account_id
   * @returns
   */
  public async getEventsByReceiverAccountId(
    receiver_account_id: string
  ): Promise<TransactionEvent[] | void> {
    return await this.transactionEventModel
      .find({ receiver_account_id })
      .sort({ timestamp: 1 });
  }

  /**
   * Get a Transaction by transaction id
   * @param transaction_id
   * @returns
   */
  public async getTransactionByTransactionId(
    transaction_id: string
  ): Promise<TransactionEvent | void | null> {
    return await this.transactionEventModel.findOne({ transaction_id });
  }

  /**
   * Calculate an account balance from all the transactions generated by that account
   * @param account_id
   * @param transaction_events
   * @returns
   */
  public async calculateAccountBalance(
    account_id: string,
    transaction_events: TransactionEvent[]
  ): Promise<number> {
    if (!transaction_events || transaction_events.length === 0) return 0;
    return this.balanceReducer(transaction_events, account_id);
  }

  /**
   * Get all Transactions generated by the user id provided.
   * @param user_id
   * @returns
   */
  public async getEventsByUserId(user_id: string): Promise<TransactionEvent[]> {
    return await this.transactionEventModel
      .find({
        $or: [{ sender_id: user_id }, { receiver_id: user_id }],
      })
      .sort({ timestamp: 1 });
  }

  /**
   * Saves events to db.
   * @param transaction_events
   * @returns
   */
  public async saveTransactionEvents(
    transaction_events: TransactionEvent[]
  ): Promise<TransactionEvent[] | void> {
    return await this.transactionEventModel.insertMany(transaction_events);
  }
}

export const TransactionRepository = new TransactionRepo(
  TransactionEventModel,
  transactionBalanceReducer
);
