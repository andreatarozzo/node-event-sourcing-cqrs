export class InvalidCommandError extends Error {
  statusCode = 400;

  constructor(message?: string) {
    super(
      message
        ? message
        : "Some mandatory parameters in the command are missing or invalid"
    );
    Object.setPrototypeOf(this, InvalidCommandError.prototype);
  }
}

export class UserAlreadyExistsError extends Error {
  statusCode = 500;

  constructor(message?: string) {
    super(message ? message : "User Already Exists");
    Object.setPrototypeOf(this, UserAlreadyExistsError.prototype);
  }
}

export class NoEventsGeneratedError extends Error {
  statusCode = 500;

  constructor(message?: string) {
    super(message ? message : "No Events have ben generated for this command");
    Object.setPrototypeOf(this, NoEventsGeneratedError.prototype);
  }
}

export class EventsNotSavedError extends Error {
  statusCode = 500;

  constructor(message?: string) {
    super(
      message
        ? message
        : "The events generated by the command have not been saved correctly"
    );
    Object.setPrototypeOf(this, EventsNotSavedError.prototype);
  }
}

export class AccountNotFoundError extends Error {
  statusCode = 404;

  constructor(message?: string) {
    super(
      message
        ? message
        : "The account related to the account_id provided was not found"
    );
    Object.setPrototypeOf(this, AccountNotFoundError.prototype);
  }
}

export class UserNotFoundError extends Error {
  statusCode = 404;

  constructor(message?: string) {
    super(
      message
        ? message
        : "The user related to the user_id provided was not found"
    );
    Object.setPrototypeOf(this, UserNotFoundError.prototype);
  }
}

export class AccountBalanceBelowZero extends Error {
  statusCode = 500;

  constructor(message?: string) {
    super(
      message
        ? message
        : "Command not processed due to the sender account balance not being sufficient to complete the transaction"
    );
    Object.setPrototypeOf(this, AccountBalanceBelowZero.prototype);
  }
}

export class TransactionNotFound extends Error {
  statusCode = 404;

  constructor(message?: string) {
    super(message ? message : "The transaction requested does not exists");
    Object.setPrototypeOf(this, TransactionNotFound.prototype);
  }
}

export class InvalidQueryError extends Error {
  statusCode = 400;

  constructor(message?: string) {
    super(message ? message : "Some information are missing from the query");
    Object.setPrototypeOf(this, InvalidQueryError.prototype);
  }
}

export class UserNotAuthorized extends Error {
  statusCode = 401;

  constructor(message?: string) {
    super(message ? message : "Invalid Credentials");
    Object.setPrototypeOf(this, UserNotAuthorized.prototype);
  }
}
